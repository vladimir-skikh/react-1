{"version":3,"sources":["components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","components/Login/Login.module.css","components/Login/Login.tsx","components/Login/LoginContainer.tsx"],"names":["module","exports","required","value","undefined","maxLength","max","length","maxLength3000","email","test","FromControl","meta","children","formControlProps","hasError","checkSubmit","touched","error","submitFailed","side","style","right","left","errorSignSide","rightSignError","leftSignError","className","formControl","wrapperClassName","classnames","errorMessageBlock","errorMessage","Textarea","props","input","restProps","inputClassName","Input","LoginReduxForm","reduxForm","form","onSubmit","handleSubmit","formStyle","summaryFormError","loginInputBlock","Field","loginFormInput","loginFormWrapper","component","type","placeholder","name","validate","loginLabel","loginLabelRememberMe","htmlFor","loginFormCheckbox","captchaUrl","loginFormCaptchaBlock","src","alt","loginFormCaptchaImage","loginSubmitButton","Login","isAuth","to","loginPage","login","socialNetworkTitle","formTitle","formDescription","formData","submitLogin","actionCreators","setIsAuthThunkCreator","LoginContainer","connect","state","authReducer"],"mappings":"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","file":"static/js/6.f2b0bf0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__20Vm3\",\"error\":\"FormControls_error__PGvtL\",\"errorMessageBlock\":\"FormControls_errorMessageBlock__6UYSD\",\"rightSignError\":\"FormControls_rightSignError__1ozix\",\"leftSignError\":\"FormControls_leftSignError__3LVnT\",\"right\":\"FormControls_right__24pmc\",\"left\":\"FormControls_left__22KrQ\",\"errorMessage\":\"FormControls_errorMessage__1dqQA\",\"summaryFormError\":\"FormControls_summaryFormError__2Y5V-\"};","export const required = (value: string): string | undefined => {\r\n    let check = value ? undefined : 'Field is required';\r\n    return check;\r\n}\r\n\r\nconst maxLength = (\r\n    max: number\r\n) => (value: string): string | undefined => value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength300 = maxLength(300);\r\nexport const maxLength3000 = maxLength(3000);\r\n\r\nexport const email = (value: string): string | undefined => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined;","import React, { FC } from 'react';\r\nimport style from './FormControls.module.css';\r\nimport classnames from 'classnames';\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\n\r\ntype InputPropsType = {\r\n    inputClassName?: string\r\n    wrapperClassName?: string\r\n    side?: string\r\n    checkSubmit?: boolean\r\n    errorSignSide?: string\r\n}\r\n\r\ntype FromControlPropsType = {\r\n    input: any,\r\n    meta: WrappedFieldMetaProps,\r\n    formControlProps: InputPropsType\r\n}\r\n\r\n/** используется деструктуризация (rest оператор) */\r\nconst FromControl: FC<FromControlPropsType> = ({\r\n    meta,\r\n    children, \r\n    formControlProps\r\n}) => {\r\n    const hasError = formControlProps.checkSubmit ? meta.touched && meta.error && meta.submitFailed : meta.touched && meta.error;\r\n    const side = (formControlProps.side && formControlProps.side === 'right') ? style.right : style.left;\r\n    const errorSignSide = (formControlProps.errorSignSide && formControlProps.errorSignSide === 'right') ? style.rightSignError : style.leftSignError;\r\n\r\n    return (\r\n        <div className={\r\n            style.formControl + ' ' \r\n            + errorSignSide + ' ' \r\n            + formControlProps.wrapperClassName + ' '\r\n            + (hasError ? style.error : '')\r\n        }>\r\n            {children}\r\n            {\r\n                ( hasError ) ?\r\n                    <div className={classnames(style.errorMessageBlock, side)}>\r\n                        <span className={style.errorMessage}>\r\n                            {meta.error}\r\n                        </span>\r\n                    </div> \r\n                : ''\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps & InputPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    const formControlProps: InputPropsType = {\r\n        inputClassName: props.inputClassName ? props.inputClassName : '',\r\n        wrapperClassName: props.wrapperClassName ? props.wrapperClassName : '',\r\n        side: props.side,\r\n        errorSignSide: props.errorSignSide\r\n    }\r\n\r\n    return <FromControl \r\n        {...props} \r\n        meta={meta}\r\n        input={input}\r\n        formControlProps={formControlProps}\r\n    > \r\n        <textarea {...input} {...restProps} className={formControlProps.inputClassName}/> \r\n    </FromControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps & InputPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    const formControlProps: InputPropsType = {\r\n        inputClassName: props.inputClassName ? props.inputClassName : '',\r\n        wrapperClassName: props.wrapperClassName ? props.wrapperClassName : '',\r\n        side: props.side,\r\n        errorSignSide: props.errorSignSide\r\n    }\r\n\r\n    return <FromControl \r\n        meta={meta}\r\n        input={input}\r\n        formControlProps={formControlProps}\r\n    > \r\n        <input {...input} {...restProps} className={formControlProps.inputClassName}/> \r\n    </FromControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginPage\":\"Login_loginPage__r2kUf\",\"login\":\"Login_login____9XR\",\"socialNetworkTitle\":\"Login_socialNetworkTitle__2o4nF\",\"formTitle\":\"Login_formTitle__sqK0p\",\"formDescription\":\"Login_formDescription__3_fyp\",\"loginInputBlock\":\"Login_loginInputBlock__3qIdN\",\"loginFormInput\":\"Login_loginFormInput__1xw4L\",\"loginFormCheckbox\":\"Login_loginFormCheckbox___N2ih\",\"loginLabel\":\"Login_loginLabel__2cW9U\",\"loginLabelRememberMe\":\"Login_loginLabelRememberMe__b7Q8S\",\"loginSubmitButton\":\"Login_loginSubmitButton__1hZOp\"};","import React, { FC } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { Field, InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { required, email } from \"../../utils/validators/validators\";\r\nimport {Input} from '../common/FormControls/FormControls';\r\nimport { MapStatePropsType, MapDispatchPropsType, OwnPropsType } from './LoginContainer';\r\nimport { LoginRequestType } from '../../api/api';\r\nimport formStyle from '../common/FormControls/FormControls.module.css';\r\nimport style from \"./Login.module.css\";\r\n\r\ntype LoginFormPropsType = {\r\n    captchaUrl: string | null\r\n} \r\n\r\nconst LoginForm: FC<InjectedFormProps<LoginRequestType, LoginFormPropsType> & LoginFormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {\r\n                props.error ?\r\n                <div className={formStyle.summaryFormError}>\r\n                    {props.error}\r\n                </div> : ''\r\n            }\r\n            <div className={style.loginInputBlock}>\r\n                <Field\r\n                    inputClassName={style.loginFormInput}\r\n                    wrapperClassName={style.loginFormWrapper}\r\n                    component={Input}\r\n                    type=\"email\"\r\n                    placeholder=\"Email\"\r\n                    name=\"email\"\r\n                    validate={[required, email]}\r\n                    side=\"right\"\r\n                    errorSignSide='right'\r\n                />\r\n            </div>\r\n            <div className={style.loginInputBlock}>\r\n                <Field\r\n                    inputClassName={style.loginFormInput}\r\n                    wrapperClassName={style.loginFormWrapper}\r\n                    component={Input}\r\n                    type=\"password\"\r\n                    placeholder=\"Password\"\r\n                    name=\"password\"\r\n                    validate={[required]}\r\n                    side=\"right\"\r\n                    errorSignSide='right'\r\n                />\r\n            </div>\r\n            <div className={style.loginInputBlock}>\r\n                <label className={style.loginLabel + ' ' + style.loginLabelRememberMe} htmlFor=\"rememberMe\">\r\n                    Remember Me?\r\n                </label>\r\n                <Field\r\n                    inputClassName={style.loginFormCheckbox}\r\n                    component={Input}\r\n                    type=\"checkbox\"\r\n                    name=\"rememberMe\"\r\n                    errorSignSide='right'\r\n                />\r\n            </div>\r\n            {\r\n                props.captchaUrl ?\r\n                    <div className={style.loginFormCaptchaBlock}>\r\n                        <img src={props.captchaUrl} alt=\"Captcha\" className={style.loginFormCaptchaImage}/>\r\n                        <div className={style.loginInputBlock}>\r\n                            <label className={style.loginLabel} htmlFor=\"rememberMe\">\r\n                                Enter symbols from image\r\n                            </label>\r\n                            <Field\r\n                                inputClassName={style.loginFormInput}\r\n                                component={Input}\r\n                                type=\"text\"\r\n                                name=\"captcha\"\r\n                                validate={[required]}\r\n                                errorSignSide='right'\r\n                            />\r\n                        </div>\r\n                    </div> : ''\r\n            }\r\n            <div className={style.loginInputBlock}>\r\n                <button className={style.loginSubmitButton} type=\"submit\">\r\n                    Sign in\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nlet LoginReduxForm = reduxForm<LoginRequestType, LoginFormPropsType>({\r\n    form: \"login\",\r\n})(LoginForm);\r\n\r\ntype LoginComponentPropsType = MapStatePropsType & MapDispatchPropsType & OwnPropsType\r\n\r\nconst Login: FC<LoginComponentPropsType> = (props) => {\r\n    const onSubmit = (formData: any) => {\r\n        props.submitLogin(formData);\r\n    };\r\n\r\n    if (props.isAuth) return <Redirect to=\"/profile\" />\r\n\r\n    return (\r\n        <div className={style.loginPage}>\r\n            <div className={style.login}>\r\n                <h1 className={style.socialNetworkTitle}>MeesageMe</h1>\r\n                <h1 className={style.formTitle}>Login</h1>\r\n                <div className={style.formDescription}>Log into your account</div>\r\n                <LoginReduxForm onSubmit={onSubmit} captchaUrl={props.captchaUrl} />\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Login;\r\n","import { connect } from 'react-redux';\r\nimport { setIsAuthThunkCreator } from '../../redux/authReducer';\r\nimport { AppStateType } from '../../redux/reduxStore';\r\nimport Login from './Login';\r\n\r\nexport type MapStatePropsType = {\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\nexport type MapDispatchPropsType = {\r\n    submitLogin: (formData: any) => any\r\n}\r\nexport type OwnPropsType = {}\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.authReducer.isAuth,\r\n        captchaUrl: state.authReducer.captchaUrl\r\n    }\r\n}\r\n\r\nconst actionCreators = {\r\n    submitLogin: setIsAuthThunkCreator\r\n}\r\n\r\nlet LoginContainer = connect<MapStatePropsType, MapDispatchPropsType, OwnPropsType, AppStateType>(mapStateToProps, actionCreators)(Login);\r\n\r\nexport default LoginContainer;"],"sourceRoot":""}