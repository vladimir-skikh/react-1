{"version":3,"sources":["components/common/FormControls/FormControls.module.css","utils/validators/validators.ts","components/common/FormControls/FormControls.tsx","components/Settings/MyProfileSettings/MyProfileSettings.module.css","components/Settings/MyProfileSettings/MyProfileSettings.jsx","components/Settings/MyProfileSettings/MyProfileSettingsContainer.jsx","components/Settings/Settings.jsx"],"names":["module","exports","required","value","undefined","maxLength","max","length","maxLength3000","email","test","FromControl","meta","children","formControlProps","hasError","checkSubmit","touched","error","submitFailed","side","style","right","left","errorSignSide","rightSignError","leftSignError","className","formControl","wrapperClassName","classnames","errorMessageBlock","errorMessage","Textarea","props","input","restProps","inputClassName","Input","MyProfileSettingsFromRedux","reduxForm","form","onSubmit","handleSubmit","settingsForm","formStyle","summaryFormError","settingsFormError","settingsSectionInputs","settingsSectionTitle","settingsInputBlock","settingsLabel","htmlFor","Field","settingsFormInput","settingsFormWrapper","component","name","validate","settingsFormTextarea","settingsFormCheckbox","type","Object","keys","profile","contacts","map","key","settingsContactsInputBlock","settingsContactsLabel","settingsButtonInputBlock","settingsSubmitButton","MyProfileSettings","formData","onSubmitForm","initialValues","MyProfileSettingsAPIContainer","saveProfile","this","initProfile","id","unsetUserProfile","init","Preloader","React","Component","actionCreators","unsetUserProfileActionCreator","saveProfileDataThunkCreator","MyProfileSettingsContainer","compose","connect","state","getId","getProfile","userProfileReducer","Settings","to","withAuthRedirect","withRouter","location","pathname","indexOf"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,4BAA4B,kBAAoB,wCAAwC,eAAiB,qCAAqC,cAAgB,oCAAoC,MAAQ,4BAA4B,KAAO,2BAA2B,aAAe,mCAAmC,iBAAmB,yC,iCCDvZ,sGAAO,IAAMC,EAAW,SAACC,GAErB,OADYA,OAAQC,EAAY,qBAI9BC,EAAY,SACdC,GADc,OAEb,SAACH,GAAD,OAAuCA,GAASA,EAAMI,OAASD,EAAxB,kBAAyCA,EAAzC,4BAAoEF,IAGnGI,GAFcH,EAAU,IACTA,EAAU,KACTA,EAAU,MAE1BI,EAAQ,SAACN,GAAD,OAAuCA,IAAU,4CAA4CO,KAAKP,GAAS,6BAA0BC,I,qKCQpJO,EAAwC,SAAC,GAIxC,IAHHC,EAGE,EAHFA,KACAC,EAEE,EAFFA,SACAC,EACE,EADFA,iBAEMC,EAAWD,EAAiBE,YAAcJ,EAAKK,SAAWL,EAAKM,OAASN,EAAKO,aAAeP,EAAKK,SAAWL,EAAKM,MACjHE,EAAQN,EAAiBM,MAAkC,UAA1BN,EAAiBM,KAAoBC,IAAMC,MAAQD,IAAME,KAC1FC,EAAiBV,EAAiBU,eAAoD,UAAnCV,EAAiBU,cAA6BH,IAAMI,eAAiBJ,IAAMK,cAEpI,OACI,yBAAKC,UACDN,IAAMO,YAAc,IAClBJ,EAAgB,IAChBV,EAAiBe,iBAAmB,KACnCd,EAAWM,IAAMH,MAAQ,KAE3BL,EAEKE,EACE,yBAAKY,UAAWG,IAAWT,IAAMU,kBAAmBX,IAChD,0BAAMO,UAAWN,IAAMW,cAClBpB,EAAKM,QAGhB,KAMLe,EAAmD,SAACC,GAAW,IACjEC,EAA6BD,EAA7BC,MAAOvB,EAAsBsB,EAAtBtB,KAASwB,EADgD,YACnCF,EADmC,kBAGjEpB,EAAmC,CACrCuB,eAAgBH,EAAMG,eAAiBH,EAAMG,eAAiB,GAC9DR,iBAAkBK,EAAML,iBAAmBK,EAAML,iBAAmB,GACpET,KAAMc,EAAMd,KACZI,cAAeU,EAAMV,eAGzB,OAAO,kBAACb,EAAD,iBACCuB,EADD,CAEHtB,KAAMA,EACNuB,MAAOA,EACPrB,iBAAkBA,IAElB,8CAAcqB,EAAWC,EAAzB,CAAoCT,UAAWb,EAAiBuB,oBAI3DC,EAAgD,SAACJ,GAAW,IAC9DC,EAA6BD,EAA7BC,MAAOvB,EAAsBsB,EAAtBtB,KAASwB,EAD6C,YAChCF,EADgC,kBAG9DpB,EAAmC,CACrCuB,eAAgBH,EAAMG,eAAiBH,EAAMG,eAAiB,GAC9DR,iBAAkBK,EAAML,iBAAmBK,EAAML,iBAAmB,GACpET,KAAMc,EAAMd,KACZI,cAAeU,EAAMV,eAGzB,OAAO,kBAACb,EAAD,CACHC,KAAMA,EACNuB,MAAOA,EACPrB,iBAAkBA,GAElB,2CAAWqB,EAAWC,EAAtB,CAAiCT,UAAWb,EAAiBuB,qB,oBCpFrErC,EAAOC,QAAU,CAAC,aAAe,wCAAwC,qBAAuB,gDAAgD,sBAAwB,iDAAiD,cAAgB,yCAAyC,mBAAqB,8CAA8C,qBAAuB,gDAAgD,2BAA6B,sDAAsD,sBAAwB,iDAAiD,yBAA2B,oDAAoD,qBAAuB,gDAAgD,kBAAoB,+C,oPCsG9tBsC,EAA6BC,YAAU,CACvCC,KAAM,qBADuBD,EA9FH,SAACN,GAC3B,OACI,0BAAMQ,SAAUR,EAAMS,aAAchB,UAAWN,IAAMuB,cAE7CV,EAAMhB,MACN,yBAAKS,UAAWkB,IAAUC,iBAAmB,IAAMzB,IAAM0B,mBACpDb,EAAMhB,OACF,GAEb,yBAAKS,UAAWN,IAAM2B,uBAClB,yBAAKrB,UAAWN,IAAM4B,sBAAtB,oBAGA,yBAAKtB,UAAWN,IAAM6B,oBAClB,2BAAOvB,UAAWN,IAAM8B,cAAeC,QAAQ,cAA/C,aAGA,kBAACC,EAAA,EAAD,CACIhB,eAAgBhB,IAAMiC,kBACtBzB,iBAAkBR,IAAMkC,oBACxBC,UAAWlB,IACXmB,KAAK,WACLC,SAAU,CAACxD,KACXkB,KAAK,QACLI,cAAc,WAGtB,yBAAKG,UAAWN,IAAM6B,oBAClB,2BAAOvB,UAAWN,IAAM8B,cAAeC,QAAQ,cAA/C,YAGA,kBAACC,EAAA,EAAD,CACIhB,eAAgBhB,IAAMsC,qBACtB9B,iBAAkBR,IAAMkC,oBACxBC,UAAWvB,IACXwB,KAAK,aAGb,yBAAK9B,UAAWN,IAAM6B,oBAClB,2BAAOvB,UAAWN,IAAM8B,cAAeC,QAAQ,kBAA/C,sBAGA,kBAACC,EAAA,EAAD,CACIhB,eAAgBhB,IAAMuC,qBACtB/B,iBAAkBR,IAAMkC,oBACxBC,UAAWlB,IACXuB,KAAK,WACLJ,KAAK,oBAGb,yBAAK9B,UAAWN,IAAM6B,oBAClB,2BAAOvB,UAAWN,IAAM8B,cAAeC,QAAQ,cAA/C,iCAGA,kBAACC,EAAA,EAAD,CACIhB,eAAgBhB,IAAMsC,qBACtB9B,iBAAkBR,IAAMkC,oBACxBC,UAAWvB,IACXwB,KAAK,gCAIjB,yBAAK9B,UAAWN,IAAM2B,uBAClB,yBAAKrB,UAAWN,IAAM4B,sBAAtB,YAIIa,OAAOC,KAAK7B,EAAM8B,QAAQC,UAAUC,KAAK,SAAAC,GACrC,OACI,yBAAKxC,UAAWG,IAAWT,IAAM6B,mBAAoB7B,IAAM+C,6BACvD,2BAAOzC,UAAWN,IAAM8B,cAAgB,IAAM9B,IAAMgD,sBAAwB,IAAMF,EAAKf,QAAQ,cAC1Fe,GAEL,kBAACd,EAAA,EAAD,CACIhB,eAAgBhB,IAAMiC,kBACtBzB,iBAAkBR,IAAMkC,oBACxBC,UAAWlB,IACXuB,KAAK,OACLJ,KAAM,YAAcU,SAO5C,yBAAKxC,UAAWN,IAAMiD,0BAClB,4BAAQ3C,UAAWN,IAAMkD,qBAAsBV,KAAK,UAApD,eAmBDW,EAPW,SAACtC,GAIvB,OAAO,kBAACK,EAAD,eAA4BG,SAHd,SAAC+B,GAClBvC,EAAMwC,aAAaD,KAEwCvC,EAAxD,CAA+DyC,cAAezC,EAAM8B,YClGzFY,E,4MAUFF,aAAe,SAACD,GACZ,EAAKvC,MAAM2C,YAAYJ,I,kEARvBK,KAAK5C,MAAM6C,YAAYD,KAAK5C,MAAM8C,M,6CAIlCF,KAAK5C,MAAM+C,qB,+BAQX,OAAKH,KAAK5C,MAAMgD,KAIZ,kBAAC,EAAD,iBACQJ,KAAK5C,MADb,CAEI8B,QAASc,KAAK5C,MAAM8B,QACpBU,aAAcI,KAAKJ,gBANhB,kBAACS,EAAA,EAAD,U,GAhByBC,IAAMC,WAsC5CC,EAAiB,CACnBL,iBAAkBM,IAClBR,YAAaA,IACbF,YAAaW,KAOFC,EAJkBC,kBAC7BC,aAfoB,SAACC,GACrB,MAAO,CACHZ,GAAIa,YAAMD,GACV5B,QAAS8B,YAAWF,GACpBV,KAAMU,EAAMG,mBAAmBb,QAWVI,GADII,CAE/Bd,GCrDIoB,EAAW,SAAC9D,GACd,OACI,6BACI,4BACI,kBAAC,IAAD,CAAS+D,GAAG,uBACR,mDAuBLP,4BAAQQ,IAAkBC,IAA1BT,EAdW,SAACxD,GACvB,OAA+E,IAA3EA,EAAMkE,SAASC,SAASC,QAAQ,YAAapE,EAAMkE,SAASC,UAExD,kBAAC,EAAD,MAKA,kBAAC,EAAD","file":"static/js/7.b87bf408.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__20Vm3\",\"error\":\"FormControls_error__PGvtL\",\"errorMessageBlock\":\"FormControls_errorMessageBlock__6UYSD\",\"rightSignError\":\"FormControls_rightSignError__1ozix\",\"leftSignError\":\"FormControls_leftSignError__3LVnT\",\"right\":\"FormControls_right__24pmc\",\"left\":\"FormControls_left__22KrQ\",\"errorMessage\":\"FormControls_errorMessage__1dqQA\",\"summaryFormError\":\"FormControls_summaryFormError__2Y5V-\"};","export const required = (value: string): string | undefined => {\r\n    let check = value ? undefined : 'Field is required';\r\n    return check;\r\n}\r\n\r\nconst maxLength = (\r\n    max: number\r\n) => (value: string): string | undefined => value && value.length > max ? `Must be ${max} characters or less` : undefined;\r\nexport const maxLength10 = maxLength(10);\r\nexport const maxLength300 = maxLength(300);\r\nexport const maxLength3000 = maxLength(3000);\r\n\r\nexport const email = (value: string): string | undefined => value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value) ? 'Invalid email address' : undefined;","import React, { FC } from 'react';\r\nimport style from './FormControls.module.css';\r\nimport classnames from 'classnames';\r\nimport { WrappedFieldMetaProps, WrappedFieldProps } from 'redux-form';\r\n\r\ntype InputPropsType = {\r\n    inputClassName?: string\r\n    wrapperClassName?: string\r\n    side?: string\r\n    checkSubmit?: boolean\r\n    errorSignSide?: string\r\n}\r\n\r\ntype FromControlPropsType = {\r\n    input: any,\r\n    meta: WrappedFieldMetaProps,\r\n    formControlProps: InputPropsType\r\n}\r\n\r\n/** используется деструктуризация (rest оператор) */\r\nconst FromControl: FC<FromControlPropsType> = ({\r\n    meta,\r\n    children, \r\n    formControlProps\r\n}) => {\r\n    const hasError = formControlProps.checkSubmit ? meta.touched && meta.error && meta.submitFailed : meta.touched && meta.error;\r\n    const side = (formControlProps.side && formControlProps.side === 'right') ? style.right : style.left;\r\n    const errorSignSide = (formControlProps.errorSignSide && formControlProps.errorSignSide === 'right') ? style.rightSignError : style.leftSignError;\r\n\r\n    return (\r\n        <div className={\r\n            style.formControl + ' ' \r\n            + errorSignSide + ' ' \r\n            + formControlProps.wrapperClassName + ' '\r\n            + (hasError ? style.error : '')\r\n        }>\r\n            {children}\r\n            {\r\n                ( hasError ) ?\r\n                    <div className={classnames(style.errorMessageBlock, side)}>\r\n                        <span className={style.errorMessage}>\r\n                            {meta.error}\r\n                        </span>\r\n                    </div> \r\n                : ''\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Textarea: FC<WrappedFieldProps & InputPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    const formControlProps: InputPropsType = {\r\n        inputClassName: props.inputClassName ? props.inputClassName : '',\r\n        wrapperClassName: props.wrapperClassName ? props.wrapperClassName : '',\r\n        side: props.side,\r\n        errorSignSide: props.errorSignSide\r\n    }\r\n\r\n    return <FromControl \r\n        {...props} \r\n        meta={meta}\r\n        input={input}\r\n        formControlProps={formControlProps}\r\n    > \r\n        <textarea {...input} {...restProps} className={formControlProps.inputClassName}/> \r\n    </FromControl>\r\n}\r\n\r\nexport const Input: FC<WrappedFieldProps & InputPropsType> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n\r\n    const formControlProps: InputPropsType = {\r\n        inputClassName: props.inputClassName ? props.inputClassName : '',\r\n        wrapperClassName: props.wrapperClassName ? props.wrapperClassName : '',\r\n        side: props.side,\r\n        errorSignSide: props.errorSignSide\r\n    }\r\n\r\n    return <FromControl \r\n        meta={meta}\r\n        input={input}\r\n        formControlProps={formControlProps}\r\n    > \r\n        <input {...input} {...restProps} className={formControlProps.inputClassName}/> \r\n    </FromControl>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsForm\":\"MyProfileSettings_settingsForm__2vhDT\",\"settingsSectionTitle\":\"MyProfileSettings_settingsSectionTitle__YNPAA\",\"settingsSectionInputs\":\"MyProfileSettings_settingsSectionInputs__2HFg2\",\"settingsLabel\":\"MyProfileSettings_settingsLabel__184Ld\",\"settingsInputBlock\":\"MyProfileSettings_settingsInputBlock__2ejYp\",\"settingsFormTextarea\":\"MyProfileSettings_settingsFormTextarea__39G2r\",\"settingsContactsInputBlock\":\"MyProfileSettings_settingsContactsInputBlock__3PilL\",\"settingsContactsLabel\":\"MyProfileSettings_settingsContactsLabel__1cI8r\",\"settingsButtonInputBlock\":\"MyProfileSettings_settingsButtonInputBlock__39aeH\",\"settingsSubmitButton\":\"MyProfileSettings_settingsSubmitButton__1TBV4\",\"settingsFormError\":\"MyProfileSettings_settingsFormError__Kmbzp\"};","import React from 'react';\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport formStyle from '../../common/FormControls/FormControls.module.css';\r\nimport {Input, Textarea} from '../../common/FormControls/FormControls';\r\nimport style from './MyProfileSettings.module.css';\r\nimport { required } from \"../../../utils/validators/validators\";\r\nimport classnames from 'classnames';\r\n\r\n\r\nconst MyProfileSettingsForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={style.settingsForm}>\r\n            {\r\n                props.error ?\r\n                <div className={formStyle.summaryFormError + ' ' + style.settingsFormError}>\r\n                    {props.error}\r\n                </div> : ''\r\n            }\r\n            <div className={style.settingsSectionInputs}>\r\n                <div className={style.settingsSectionTitle}>\r\n                    Main information\r\n                </div>\r\n                <div className={style.settingsInputBlock}>\r\n                    <label className={style.settingsLabel} htmlFor=\"rememberMe\">\r\n                        Full name\r\n                    </label>\r\n                    <Field\r\n                        inputClassName={style.settingsFormInput}\r\n                        wrapperClassName={style.settingsFormWrapper}\r\n                        component={Input}\r\n                        name=\"fullName\"\r\n                        validate={[required]}\r\n                        side='right'\r\n                        errorSignSide='rigth'\r\n                    />\r\n                </div>\r\n                <div className={style.settingsInputBlock}>\r\n                    <label className={style.settingsLabel} htmlFor=\"rememberMe\">\r\n                        About me\r\n                    </label>\r\n                    <Field\r\n                        inputClassName={style.settingsFormTextarea}\r\n                        wrapperClassName={style.settingsFormWrapper}\r\n                        component={Textarea}\r\n                        name=\"aboutMe\"\r\n                    />\r\n                </div>\r\n                <div className={style.settingsInputBlock}>\r\n                    <label className={style.settingsLabel} htmlFor=\"lookingForAJob\">\r\n                        Looking For A Job?\r\n                    </label>\r\n                    <Field\r\n                        inputClassName={style.settingsFormCheckbox}\r\n                        wrapperClassName={style.settingsFormWrapper}\r\n                        component={Input}\r\n                        type=\"checkbox\"\r\n                        name=\"lookingForAJob\"\r\n                    />\r\n                </div>\r\n                <div className={style.settingsInputBlock}>\r\n                    <label className={style.settingsLabel} htmlFor=\"rememberMe\">\r\n                        Looking for a job description\r\n                    </label>\r\n                    <Field\r\n                        inputClassName={style.settingsFormTextarea}\r\n                        wrapperClassName={style.settingsFormWrapper}\r\n                        component={Textarea}\r\n                        name=\"lookingForAJobDescription\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className={style.settingsSectionInputs}>\r\n                <div className={style.settingsSectionTitle}>\r\n                    Contacts\r\n                </div>\r\n                {\r\n                    Object.keys(props.profile.contacts).map( key => {\r\n                        return (\r\n                            <div className={classnames(style.settingsInputBlock, style.settingsContactsInputBlock)}>\r\n                                <label className={style.settingsLabel + ' ' + style.settingsContactsLabel + ' ' + key} htmlFor=\"rememberMe\">\r\n                                    {key}\r\n                                </label>\r\n                                <Field\r\n                                    inputClassName={style.settingsFormInput}\r\n                                    wrapperClassName={style.settingsFormWrapper}\r\n                                    component={Input}\r\n                                    type=\"text\"\r\n                                    name={\"contacts.\" + key}\r\n                                />\r\n                            </div>\r\n                        );\r\n                    })\r\n                }\r\n            </div>\r\n            <div className={style.settingsButtonInputBlock}>\r\n                <button className={style.settingsSubmitButton} type=\"submit\">\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nlet MyProfileSettingsFromRedux = reduxForm({\r\n    form: 'myprofileSettings'\r\n})(MyProfileSettingsForm);\r\n\r\nconst MyProfileSettings = (props) => {\r\n    const onSubmitForm = (formData) => {\r\n        props.onSubmitForm(formData);\r\n    }\r\n    return <MyProfileSettingsFromRedux onSubmit={onSubmitForm} {...props} initialValues={props.profile}/>;\r\n}\r\n\r\nexport default MyProfileSettings;","import React from 'react';\r\nimport { compose } from \"redux\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n    initProfile,\r\n    unsetUserProfileActionCreator,\r\n    saveProfileDataThunkCreator\r\n} from '../../../redux/userProfileReducer';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { getId, getProfile } from '../../../redux/selectors/profileSelector';\r\nimport MyProfileSettings from './MyProfileSettings';\r\n\r\n\r\nclass MyProfileSettingsAPIContainer extends React.Component \r\n{\r\n    componentDidMount() {\r\n        this.props.initProfile(this.props.id);\r\n    }\r\n    \r\n    componentWillUnmount() {\r\n        this.props.unsetUserProfile();\r\n    }\r\n\r\n    onSubmitForm = (formData) => {\r\n        this.props.saveProfile(formData);\r\n    }\r\n\r\n    render () {\r\n        if (!this.props.init) {\r\n            return <Preloader />;\r\n        }\r\n        return (\r\n            <MyProfileSettings \r\n                {...this.props} \r\n                profile={this.props.profile} \r\n                onSubmitForm={this.onSubmitForm}\r\n            />\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        id: getId(state),\r\n        profile: getProfile(state),\r\n        init: state.userProfileReducer.init,\r\n    };\r\n};\r\n\r\nconst actionCreators = {\r\n    unsetUserProfile: unsetUserProfileActionCreator,\r\n    initProfile: initProfile,\r\n    saveProfile: saveProfileDataThunkCreator,\r\n};\r\n\r\nlet MyProfileSettingsContainer = compose(\r\n    connect(mapStateToProps, actionCreators),\r\n)(MyProfileSettingsAPIContainer);\r\n\r\nexport default MyProfileSettingsContainer;","import React from 'react';\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { compose } from 'redux';\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport MyProfileSettingsContainer from './MyProfileSettings/MyProfileSettingsContainer';\r\n\r\nconst Settings = (props) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n                <NavLink to='/settings/myprofile'>\r\n                    <li>\r\n                        My profile info\r\n                    </li>\r\n                </NavLink>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst SettingsContainer = (props) => {\r\n    if (props.location.pathname.indexOf('myprofile', props.location.pathname) !== -1) {\r\n        return (\r\n            <MyProfileSettingsContainer />\r\n        );\r\n    }\r\n    else {\r\n        return(\r\n            <Settings />\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default compose(withAuthRedirect, withRouter)(SettingsContainer);"],"sourceRoot":""}